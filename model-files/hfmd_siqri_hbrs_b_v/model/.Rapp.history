rm(list=ls())#
#
library(MASS)#
library(Hmisc)
setwd("~/Downloads/PHtyph_forR_89_01.csv")
rm(list=ls())#
#
library(MASS)#
library(Hmisc)#
#setwd("/Users/tiffzoo/code/simforence/data/ev71")#
#setwd("/Users/cjessicametcalf/Documents/Tiff/") #xxj#
#setwd("/Users/Elizabeth/Desktop/Thesis Data/R typh")#
setwd("~/Downloads/PHtyph_forR_89_01.csv")#
wk<- read.csv("PHtyph_forR_89_01.csv")#
#
#week count#
ws<-seq(1,length(wk$Year),1)#
nbw<-length(ws)/2
setwd("/Users/tbogich/Downloads/PHtyph_forR_89_01.csv")
load("/Users/tbogich/Dropbox/Tiff Laptop Files/Courses and Methods/SISMID11/Module 6 Data/equine.RData")
ls()
summary(equine)
load("/Users/tbogich/Dropbox/Tiff Laptop Files/Courses and Methods/SISMID11/Module 6 Data/data.RData")
ls()
summary(flu)
summary(niamey)
summary(plague)
plot(flu)
niamey[5,3]<-0  #replace a "NA"#
niamey<-data.frame(biweek=rep(seq(1,16),3),site=c(rep(1,16),rep(2,16),rep(3,16)),#
                   cases=c(niamey[,1],niamey[,2],niamey[,3])) #define "biweeks"#
####################################################
### chunk number 8: #
####################################################
#line 176 "SISMID11_session3.rnw"#
plot(niamey$biweek,niamey$cases,type='p',col=niamey$site,xlab='Biweek',ylab='Cases')#
lines(niamey$biweek[niamey$site==1],niamey$cases[niamey$site==1])#
lines(niamey$biweek[niamey$site==2],niamey$cases[niamey$site==2],col=2)#
lines(niamey$biweek[niamey$site==3],niamey$cases[niamey$site==3],col=3)
some variables#
a <- 10   #amino acid differences#
beta <- 0.62#
W <- uniroot(function(W) W*exp(W), lower=-1/exp(1), upper=1)$root   #constant for total epidemic size
functions for p, q, d and R#
p <- function(a) 1/(1+exp(-0.281*a-0.411))#
q <- function(a) 1/(1+exp(-0.267*a-0.755))#
d <- function(a) 0.164*a+2.841#
R <- function(a, beta) beta*p(a)*q(a)*d(a)#
epidemic.size <- function(data) tail(data$Z,1)-head(data$Z,1)#
deterministic.epidemic.size <- function()
some functions on possible events#
transmission <- function(x, parms) parms$beta*x$X*x$Y/(x$X+x$W+x$Y+x$Z)#
exp2inf <- function(x, parms) parms$q*x$W/parms$u#
exp2rec <- function(x, parms) (1-parms$q)*x$W/parms$u#
inf2rec <- function(x, parms) x$Y/parms$d#
#
#SEIR model with imperfect vaccination#
Park.onestep <- function (x, parms) {  #function to calculate one step of stochastic SIR#
  X <- x$X                            #local variable for susceptibles#
  W <- x$W                            #local variable for exposed#
  Y <- x$Y                            #local variable for infected#
  Z <- x$Z                            #local variable for recovered#
  total.rate <- transmission(x,parms)+exp2inf(x,parms)+exp2rec(x,parms)+inf2rec(x,parms)  #calculate ``total rate''#
  tau <- rexp(n=1,rate=total.rate)                               #inter-event time#
  new.x <- c(X,W,Y,Z) #initialize a local variable at previous state variable values#
  U <- runif(1)       #uniform random deviate#
  new.x<-c(X,W,Y-1,Z+1) #inf2rec as "default"#
  if(U<=(transmission(x,parms)+exp2inf(x,parms)+exp2rec(x,parms))/total.rate) new.x<-c(X,W-1,Y,Z+1) #exp2rec#
  if(U<=(transmission(x,parms)+exp2inf(x,parms))/total.rate) new.x<-c(X,W-1,Y+1,Z) #exp2inf#
  if(U<=(transmission(x,parms))/total.rate) new.x<-c(X-1,W+1,Y,Z) #transmission#
  out <- list(time=tau,X=new.x[1],W=new.x[2],Y=new.x[3],Z=new.x[4]) #store result#
  }
Park.model <- function (x, parms) {  #function to simulate stochastic SIR#
  output <- array(dim=c(1,5))         #set up array to store results#
  colnames(output) <- c("time","X","W","Y","Z") #name variables#
  output[1,] <- as.numeric(x)                           #first record of output is initial condition#
  while (x$W+x$Y>0) {                      #iterate for nstep steps#
    x <- Park.onestep(x,parms)#
    output <- rbind(output,as.numeric(x))#
  }#
  output                                    #return output#
}
Simulation#
set.seed(38499583)          #set seed#
#set.seed(10281979)#
nsims <- 1000                 #number of simulations#
N <- 1000                   #total population size#
X0 <- round(p(a)*N-1,0)     #initial number susceptible#
W0 <- 0                     #initial number exposed#
Y0 <- 1                     #initial number infectious#
Z0 <- N-X0-W0-Y0            #initial number recovered#
#
xstart <- list(time=0,X=X0,W=W0,Y=Y0,Z=Z0) #initial conditions#
parms <- list(beta=beta,u=2.2,p=p(a), d=d(a), q=q(a)) #parameters#
data <- vector(mode='list',length=nsims) #initialize list to store the output#
for (k in 1:nsims) {                     #simulate nsims times#
  data[[k]] <- as.data.frame(Park.model(xstart,parms))#
  data[[k]]$cum.time <- cumsum(data[[k]]$time)#
}
max.time<-data[[1]]$cum.time[max(which(data[[1]]$Y>0))] #maximum time in first simulation#
max.y<-1.8*max(data[[1]]$Y)       #find max infected in run 1 and increase by 80% for plot#
plot(Y~cum.time,data=data[[1]],xlab='time',ylab='incidence',col=1,xlim=c(0,max.time),ylim=c(0,max.y),type='l')#
for (k in 1:nsims) {              #add multiple epidemics to plot#
  lines(Y~cum.time,data=data[[k]],col=k,type='l')#
}
out <- sapply(data, epidemic.size)#
quant <- quantile(out,c(0.05,0.5, 0.95))
quants <- data.frame(a=numeric(0),p05=numeric(0),p50=numeric(0),p95=numeric(0))#
for(a in 0:10){#
  X0 <- round(p(a)*N-1,0)     #initial number susceptible#
  W0 <- 0                     #initial number exposed#
  Y0 <- 1                     #initial number infectious#
  Z0 <- N-X0-W0-Y0            #initial number recovered#
  xstart <- list(time=0,X=X0,W=W0,Y=Y0,Z=Z0) #initial conditions#
  parms <- list(beta=beta,u=2.2,p=p(a), d=d(a), q=q(a)) #parameters#
  data <- vector(mode='list',length=nsims) #initialize list to store the output#
  for (k in 1:nsims) {                     #simulate nsims times#
    data[[k]] <- as.data.frame(Park.model(xstart,parms))#
    data[[k]]$cum.time <- cumsum(data[[k]]$time)#
  } #
  out <- sapply(data, epidemic.size)#
  quant <- quantile(out,c(0.05,0.5, 0.95))#
  quants <- rbind(quants,c(a,quant))#
}#
#
x11()#
plot(quants$X0,quants$X19,type='b', col='red', xlab='Amino acid differences (a)', ylab='Outbreak size')#
points(quants$X0,quants$X2,type='b', col='blue', xlab='Amino acid differences (a)', ylab='Outbreak size')
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")
head(data)
data$date
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")#
#
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
write.csv(data,file="~/Dropbox/typhoid/data/data_full/data.csv",row.names=FALSE)
change births to birth rate#
birth<-read.csv("~/Dropbox/typhoid/data/raw_data/US_births.csv")#
names(birth)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
pop<-read.csv("~/Dropbox/typhoid/data/raw_data/US_popsize.csv")#
names(pop)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
#write population to data file N.csv#
write.csv(pop,file="~/Dropbox/typhoid/data/data_full/N.csv",row.names=FALSE)#
#
#calculate birth rate#
mu_b<-birth[,2:ncol(birth)]/pop[,2:ncol(birth)]#
#
#replace births with birth rate#
birth[,2:ncol(birth)]=mu_b#
#
write.csv(birth,file="~/Dropbox/typhoid/data/data_full/mu_b.csv",row.names=FALSE)#
#
#assume birth rate = death rate?#
write.csv(birth, file="~/Dropbox/typhoid/data/data_full/mu_d.csv",row.names=FALSE)#
#
#reporting rate?#
prop<-birth#
prop[,2:ncol(prop)]=1#
#
write.csv(prop,file="~/Dropbox/typhoid/data/data_full/prop.csv",row.names=FALSE)#
data<-read.csv("~/Dropbox/typhoid/data/data_full/data.csv")#
N<-read.csv("~/Dropbox/typhoid/data/data_full/N.csv")#
prop<-read.csv("~/Dropbox/typhoid/data/data_full/prop.csv")#
mu_b<-read.csv("~/Dropbox/typhoid/data/data_full/mu_b.csv")#
mu_d<-read.csv("~/Dropbox/typhoid/data/data_full/mu_d.csv")#
#
#NYC and Philly#
subset.c<-c(12,16)#
data.s<-data[,c(1,subset.c)]#
N.s<-N[,c(1,subset.c)]#
mu_b.s<-mu_b[,c(1,subset.c)]#
mu_d.s<-mu_d[,c(1,subset.c)]#
prop.s<-prop[,c(1,subset.c)]#
write.csv(data.s,"~/Dropbox/typhoid/data/data.csv",row.names=FALSE)#
write.csv(N.s,"~/Dropbox/typhoid/data/N.csv",row.names=FALSE)#
write.csv(mu_b.s,"~/Dropbox/typhoid/data/mu_b.csv",row.names=FALSE)#
write.csv(mu_d.s,"~/Dropbox/typhoid/data/mu_d.csv",row.names=FALSE)#
write.csv(prop.s,"~/Dropbox/typhoid/data/prop.csv",row.names=FALSE)
convert years to weeks for tau#
guess=(1905-1888)*(365/52)#
max=(1933-1888)*(365/52)#
#
id<-names(data)[-1]#
size_t0<-as.numeric(N[1,2:ncol(N)])#
comment<-paste(id,", all age classes",sep="")#
label<-c("id", "size_t0","comment")#
#
population<-paste("{",label[1],": ",id[1],", ",label[2],": ",size_t0[1],", ",label[3],": ",comment[1],"}",sep="")#
for(i in 2:length(id)){#
temp<-c(id[i],size_t0[i],comment[i])#
population=asJSvar(population,temp)#
}
library(RJSONIO)
copy over typhoid data into data.csv#
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")#
#
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
write.csv(data,file="~/Dropbox/typhoid/data/data_full/data.csv",row.names=FALSE)#
#
#change births to birth rate#
birth<-read.csv("~/Dropbox/typhoid/data/raw_data/US_births.csv")#
names(birth)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
pop<-read.csv("~/Dropbox/typhoid/data/raw_data/US_popsize.csv")#
names(pop)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
#write population to data file N.csv#
write.csv(pop,file="~/Dropbox/typhoid/data/data_full/N.csv",row.names=FALSE)#
#
#calculate birth rate#
mu_b<-birth[,2:ncol(birth)]/pop[,2:ncol(birth)]#
#
#replace births with birth rate#
birth[,2:ncol(birth)]=mu_b#
#
write.csv(birth,file="~/Dropbox/typhoid/data/data_full/mu_b.csv",row.names=FALSE)#
#
#assume birth rate = death rate?#
write.csv(birth, file="~/Dropbox/typhoid/data/data_full/mu_d.csv",row.names=FALSE)#
#
#reporting rate?#
prop<-birth#
prop[,2:ncol(prop)]=1#
#
write.csv(prop,file="~/Dropbox/typhoid/data/data_full/prop.csv",row.names=FALSE)#
data<-read.csv("~/Dropbox/typhoid/data/data_full/data.csv")#
N<-read.csv("~/Dropbox/typhoid/data/data_full/N.csv")#
prop<-read.csv("~/Dropbox/typhoid/data/data_full/prop.csv")#
mu_b<-read.csv("~/Dropbox/typhoid/data/data_full/mu_b.csv")#
mu_d<-read.csv("~/Dropbox/typhoid/data/data_full/mu_d.csv")#
#
#NYC and Philly#
subset.c<-c(12,16)#
data.s<-data[,c(1,subset.c)]#
N.s<-N[,c(1,subset.c)]#
mu_b.s<-mu_b[,c(1,subset.c)]#
mu_d.s<-mu_d[,c(1,subset.c)]#
prop.s<-prop[,c(1,subset.c)]#
write.csv(data.s,"~/Dropbox/typhoid/data/data.csv",row.names=FALSE)#
write.csv(N.s,"~/Dropbox/typhoid/data/N.csv",row.names=FALSE)#
write.csv(mu_b.s,"~/Dropbox/typhoid/data/mu_b.csv",row.names=FALSE)#
write.csv(mu_d.s,"~/Dropbox/typhoid/data/mu_d.csv",row.names=FALSE)#
write.csv(prop.s,"~/Dropbox/typhoid/data/prop.csv",row.names=FALSE)#
###convert years to weeks for tau#
guess=(1905-1888)*(365/52)#
max=(1933-1888)*(365/52)#
#
id<-names(data)[-1]#
size_t0<-as.numeric(N[1,2:ncol(N)])#
comment<-paste(id,", all age classes",sep="")#
label<-c("id", "size_t0","comment")#
#
population<-paste("{",label[1],": ",id[1],", ",label[2],": ",size_t0[1],", ",label[3],": ",comment[1],"}",sep="")#
for(i in 2:length(id)){#
temp<-c(id[i],size_t0[i],comment[i])#
population=asJSvar(population,temp)#
}
library(rjson)
population<-paste("{",label[1],": ",id[1],", ",label[2],": ",size_t0[1],", ",label[3],": ",comment[1],"}",sep="")#
for(i in 2:length(id)){#
temp<-c(id[i],size_t0[i],comment[i])#
population=asJSvars(population,temp)#
}
population<-paste("{",label[1],": ",id[1],", ",label[2],": ",size_t0[1],", ",label[3],": ",comment[1],"}",sep="")#
for(i in 2:length(id)){#
temp<-c(id[i],size_t0[i],comment[i])#
population=asJSVars(population,temp)#
}
population
library(RJSONIO)#
#copy over typhoid data into data.csv#
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))
names(data)
id
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")
head(data)
library(RJSONIO)#
#copy over typhoid data into data.csv#
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))
names(data)
write.csv(data,file="~/Dropbox/typhoid/data/data_full/data.csv",row.names=FALSE)#
#
#change births to birth rate#
birth<-read.csv("~/Dropbox/typhoid/data/raw_data/US_births.csv")#
names(birth)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
pop<-read.csv("~/Dropbox/typhoid/data/raw_data/US_popsize.csv")#
names(pop)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
#write population to data file N.csv#
write.csv(pop,file="~/Dropbox/typhoid/data/data_full/N.csv",row.names=FALSE)#
#
#calculate birth rate#
mu_b<-birth[,2:ncol(birth)]/pop[,2:ncol(birth)]#
#
#replace births with birth rate#
birth[,2:ncol(birth)]=mu_b#
#
write.csv(birth,file="~/Dropbox/typhoid/data/data_full/mu_b.csv",row.names=FALSE)#
#
#assume birth rate = death rate?#
write.csv(birth, file="~/Dropbox/typhoid/data/data_full/mu_d.csv",row.names=FALSE)#
#
#reporting rate?#
prop<-birth#
prop[,2:ncol(prop)]=1#
#
write.csv(prop,file="~/Dropbox/typhoid/data/data_full/prop.csv",row.names=FALSE)#
data<-read.csv("~/Dropbox/typhoid/data/data_full/data.csv")#
N<-read.csv("~/Dropbox/typhoid/data/data_full/N.csv")#
prop<-read.csv("~/Dropbox/typhoid/data/data_full/prop.csv")#
mu_b<-read.csv("~/Dropbox/typhoid/data/data_full/mu_b.csv")#
mu_d<-read.csv("~/Dropbox/typhoid/data/data_full/mu_d.csv")#
#
#NYC and Philly#
subset.c<-c(12,16)#
data.s<-data[,c(1,subset.c)]#
N.s<-N[,c(1,subset.c)]#
mu_b.s<-mu_b[,c(1,subset.c)]#
mu_d.s<-mu_d[,c(1,subset.c)]#
prop.s<-prop[,c(1,subset.c)]#
write.csv(data.s,"~/Dropbox/typhoid/data/data.csv",row.names=FALSE)#
write.csv(N.s,"~/Dropbox/typhoid/data/N.csv",row.names=FALSE)#
write.csv(mu_b.s,"~/Dropbox/typhoid/data/mu_b.csv",row.names=FALSE)#
write.csv(mu_d.s,"~/Dropbox/typhoid/data/mu_d.csv",row.names=FALSE)#
write.csv(prop.s,"~/Dropbox/typhoid/data/prop.csv",row.names=FALSE)
library(RJSONIO)#
#copy over typhoid data into data.csv#
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")#
#
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))
write.csv(data,file="~/Dropbox/typhoid/data/data_full/data.csv",row.names=FALSE)#
#
#change births to birth rate#
birth<-read.csv("~/Dropbox/typhoid/data/raw_data/US_births.csv")#
names(birth)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
pop<-read.csv("~/Dropbox/typhoid/data/raw_data/US_popsize.csv")#
names(pop)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
#write population to data file N.csv#
write.csv(pop,file="~/Dropbox/typhoid/data/data_full/N.csv",row.names=FALSE)#
#
#calculate birth rate#
mu_b<-birth[,2:ncol(birth)]/pop[,2:ncol(birth)]#
#
#replace births with birth rate#
birth[,2:ncol(birth)]=mu_b#
#
write.csv(birth,file="~/Dropbox/typhoid/data/data_full/mu_b.csv",row.names=FALSE)#
#
#assume birth rate = death rate?#
write.csv(birth, file="~/Dropbox/typhoid/data/data_full/mu_d.csv",row.names=FALSE)#
#
#reporting rate?#
prop<-birth#
prop[,2:ncol(prop)]=1#
#
write.csv(prop,file="~/Dropbox/typhoid/data/data_full/prop.csv",row.names=FALSE)#
data<-read.csv("~/Dropbox/typhoid/data/data_full/data.csv")#
N<-read.csv("~/Dropbox/typhoid/data/data_full/N.csv")#
prop<-read.csv("~/Dropbox/typhoid/data/data_full/prop.csv")#
mu_b<-read.csv("~/Dropbox/typhoid/data/data_full/mu_b.csv")#
mu_d<-read.csv("~/Dropbox/typhoid/data/data_full/mu_d.csv")#
#
#NYC and Philly#
subset.c<-c(12,16)#
data.s<-data[,c(1,subset.c)]#
N.s<-N[,c(1,subset.c)]#
mu_b.s<-mu_b[,c(1,subset.c)]#
mu_d.s<-mu_d[,c(1,subset.c)]#
prop.s<-prop[,c(1,subset.c)]#
write.csv(data.s,"~/Dropbox/typhoid/data/data.csv",row.names=FALSE)#
write.csv(N.s,"~/Dropbox/typhoid/data/N.csv",row.names=FALSE)#
write.csv(mu_b.s,"~/Dropbox/typhoid/data/mu_b.csv",row.names=FALSE)#
write.csv(mu_d.s,"~/Dropbox/typhoid/data/mu_d.csv",row.names=FALSE)#
write.csv(prop.s,"~/Dropbox/typhoid/data/prop.csv",row.names=FALSE)
library(RJSONIO)#
#copy over typhoid data into data.csv#
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid_2.csv")#
#
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
write.csv(data,file="~/Dropbox/typhoid/data/data_full/data.csv",row.names=FALSE)#
#
#change births to birth rate#
birth<-read.csv("~/Dropbox/typhoid/data/raw_data/US_births.csv")#
names(birth)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
pop<-read.csv("~/Dropbox/typhoid/data/raw_data/US_popsize.csv")#
names(pop)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
#write population to data file N.csv#
write.csv(pop,file="~/Dropbox/typhoid/data/data_full/N.csv",row.names=FALSE)#
#
#calculate birth rate#
mu_b<-birth[,2:ncol(birth)]/pop[,2:ncol(birth)]#
#
#replace births with birth rate#
birth[,2:ncol(birth)]=mu_b#
#
write.csv(birth,file="~/Dropbox/typhoid/data/data_full/mu_b.csv",row.names=FALSE)#
#
#assume birth rate = death rate?#
write.csv(birth, file="~/Dropbox/typhoid/data/data_full/mu_d.csv",row.names=FALSE)#
#
#reporting rate?#
prop<-birth#
prop[,2:ncol(prop)]=1#
#
write.csv(prop,file="~/Dropbox/typhoid/data/data_full/prop.csv",row.names=FALSE)#
data<-read.csv("~/Dropbox/typhoid/data/data_full/data.csv")#
N<-read.csv("~/Dropbox/typhoid/data/data_full/N.csv")#
prop<-read.csv("~/Dropbox/typhoid/data/data_full/prop.csv")#
mu_b<-read.csv("~/Dropbox/typhoid/data/data_full/mu_b.csv")#
mu_d<-read.csv("~/Dropbox/typhoid/data/data_full/mu_d.csv")#
#
#NYC and Philly#
subset.c<-c(12,16)#
data.s<-data[,c(1,subset.c)]#
N.s<-N[,c(1,subset.c)]#
mu_b.s<-mu_b[,c(1,subset.c)]#
mu_d.s<-mu_d[,c(1,subset.c)]#
prop.s<-prop[,c(1,subset.c)]#
write.csv(data.s,"~/Dropbox/typhoid/data/data.csv",row.names=FALSE)#
write.csv(N.s,"~/Dropbox/typhoid/data/N.csv",row.names=FALSE)#
write.csv(mu_b.s,"~/Dropbox/typhoid/data/mu_b.csv",row.names=FALSE)#
write.csv(mu_d.s,"~/Dropbox/typhoid/data/mu_d.csv",row.names=FALSE)#
write.csv(prop.s,"~/Dropbox/typhoid/data/prop.csv",row.names=FALSE)
copy over typhoid data into data.csv#
data<-read.csv("~/Dropbox/typhoid/data/raw_data/US_typhoid.csv")#
#
id<-names(data)[-1]#
st<-rep("__stream1__inc",length(id))#
names(data)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
write.csv(data,file="~/Dropbox/typhoid/data/data_full/data.csv",row.names=FALSE)#
#
#change births to birth rate#
birth<-read.csv("~/Dropbox/typhoid/data/raw_data/US_births.csv")#
names(birth)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
pop<-read.csv("~/Dropbox/typhoid/data/raw_data/US_popsize.csv")#
names(pop)[2:ncol(data)]<-do.call(paste, c(list(id,st),sep=""))#
#
#write population to data file N.csv#
write.csv(pop,file="~/Dropbox/typhoid/data/data_full/N.csv",row.names=FALSE)#
#
#calculate birth rate#
mu_b<-birth[,2:ncol(birth)]/pop[,2:ncol(birth)]#
#
#replace births with birth rate#
birth[,2:ncol(birth)]=mu_b#
#
write.csv(birth,file="~/Dropbox/typhoid/data/data_full/mu_b.csv",row.names=FALSE)#
#
#assume birth rate = death rate?#
write.csv(birth, file="~/Dropbox/typhoid/data/data_full/mu_d.csv",row.names=FALSE)#
#
#reporting rate?#
prop<-birth#
prop[,2:ncol(prop)]=1#
#
write.csv(prop,file="~/Dropbox/typhoid/data/data_full/prop.csv",row.names=FALSE)#
data<-read.csv("~/Dropbox/typhoid/data/data_full/data.csv")#
N<-read.csv("~/Dropbox/typhoid/data/data_full/N.csv")#
prop<-read.csv("~/Dropbox/typhoid/data/data_full/prop.csv")#
mu_b<-read.csv("~/Dropbox/typhoid/data/data_full/mu_b.csv")#
mu_d<-read.csv("~/Dropbox/typhoid/data/data_full/mu_d.csv")#
#
#NYC and Philly#
subset.c<-c(12,16)#
data.s<-data[,c(1,subset.c)]#
N.s<-N[,c(1,subset.c)]#
mu_b.s<-mu_b[,c(1,subset.c)]#
mu_d.s<-mu_d[,c(1,subset.c)]#
prop.s<-prop[,c(1,subset.c)]#
write.csv(data.s,"~/Dropbox/typhoid/data/data.csv",row.names=FALSE)#
write.csv(N.s,"~/Dropbox/typhoid/data/N.csv",row.names=FALSE)#
write.csv(mu_b.s,"~/Dropbox/typhoid/data/mu_b.csv",row.names=FALSE)#
write.csv(mu_d.s,"~/Dropbox/typhoid/data/mu_d.csv",row.names=FALSE)#
write.csv(prop.s,"~/Dropbox/typhoid/data/prop.csv",row.names=FALSE)
library(coda)
?gelman
??gelman.diag
jcv<-read.csv("~/plom.io/lib/pict/journal_covers/journal_data.csv")#
#
jlist<-list()#
for(i in 1:nrow(jcv)){#
	jlist[[i]]<-c(Publisher=as.character(jcv[i,3]),#
	Journal=as.character(jcv[i,1]),#
	IF=as.numeric(jcv[i,2]),#
	Image=as.character(jcv[i,4]))#
}#
#
write(toJSON(jlist),"~/plom.io/lib/pict/journal_covers/journal_data_list.JSON")#
write(toJSON(jcv),"~/plom.io/lib/pict/journal_covers/journal_data.JSON")
jcv<-read.csv("~/Dropbox/plom_wiley.io/lib/pict/journal_covers")#
jlist<-list()#
for(i in 1:nrow(jcv)){#
	jlist[[i]]<-c(Publisher=as.character(jcv[i,3]),#
	Journal=as.character(jcv[i,1]),#
	IF=as.numeric(jcv[i,2]),#
	Image=as.character(jcv[i,4]))#
}#
#
write(toJSON(jlist),"~/plom.io/lib/pict/journal_covers/journal_data_list.JSON")#
write(toJSON(jcv),"~/plom.io/lib/pict/journal_covers/journal_data.JSON")
jcv<-read.csv("~/Dropbox/plom_wiley.io/lib/pict/journal_covers")
jcv<-read.csv("~/Dropbox/plom_wiley.io/lib/pict/journal_covers/journal_data.csv")
jlist<-list()#
for(i in 1:nrow(jcv)){#
	jlist[[i]]<-c(Publisher=as.character(jcv[i,3]),#
	Journal=as.character(jcv[i,1]),#
	IF=as.numeric(jcv[i,2]),#
	Image=as.character(jcv[i,4]))#
}
write(toJSON(jlist),"~/Dropbox/plom_wiley.io/lib/pict/journal_covers/journal_data_list.JSON")
require(RJSONIO)
write(toJSON(jlist),"~/Dropbox/plom_wiley.io/lib/pict/journal_covers/journal_data_list.JSON")
write(toJSON(jcv),"~/Dropbox/plom_wiley.io/lib/pict/journal_covers/journal_data.JSON")
mv<-c(0,0,0,1,1,0,0,1,1,1,1)
fv<-c(1,0,0,0,0,1,1,0,0,0,0)
chisq.test(mv,fv)
?chisq.test
?matrix
japsys08=read.csv("~/Dropbox/Documents/Work/HFMD/HFMD_syndromic_IDWR_bg.csv")
japsys08=read.csv("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_bg.csv")
japsys08=read.csv("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_tb.csv")
japsys08=read.table("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_tb.csv")
japsys08=read.table(pipe("pbpaste"))
image(t(as.matrix(log(japsys08[,5:204]+1)))) #crude ts plot
fit1=Sncf(x=japsys08[,"x_coord"],y=japsys08[,"y_coord"],z=as.matrix(log(japsys08[,5:204]+1)),resamp=5,latlon=TRUE)
library(ncf)
fit1=Sncf(x=japsys08[,"x_coord"],y=japsys08[,"y_coord"],z=as.matrix(log(japsys08[,5:204]+1)),resamp=5,latlon=TRUE)
z=as.matrix(japsys08[,5:204])
dim(japsys08)
head(japsys08)
japsys08=read.table("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_tb.csv")
japsys08
image(t(as.matrix(log(japsys08[,5:204]+1)))) #crude ts plot
japsys08=read.table("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_tb.csv",sep=",")
japsys08=read.csv("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_tb.csv")
japsys08=read.table(pipe("pbpaste"))
japsys08=read.csv("~/Dropbox/HFMDbg/HFMD_syndromic_IDWR_tb.csv")
image(t(as.matrix(log(japsys08[,5:204]+1)))) #crude ts plot
fit1=Sncf(x=japsys08[,"x_coord"],y=japsys08[,"y_coord"],z=as.matrix(log(japsys08[,5:204]+1)),resamp=5,latlon=TRUE)
z=as.matrix(japsys08[,5:204])#
z1=colSums(z[japsys08[,"Big_region"]==1,])#
z2=colSums(z[japsys08[,"Big_region"]==2,])#
z3=colSums(z[japsys08[,"Big_region"]==3,])#
zt=z1+z2+z3
ztime=2008+(0:199)/52
plot(ztime,zt/max(zt),type="l")
lines(ztime,z1/max(z1),col=2)#
lines(ztime,z2/max(z2),col=3)#
lines(ztime,z3/max(z3),col=4)#
lines(ztime,z["Tokyo",]/max(z["Tokyo",]),col=2)#
library("mapdata") #load mapdata library
ztime
zt/max(zt)
zt
class(zt)
max(zt)
na.omit(zt)
max(na.omit(zt))
plot(ztime,zt/max(na.omit(zt)),type="l")#
lines(ztime,z1/max(na.omit(z1)),col=2)#
lines(ztime,z2/max(na.omit(z2)),col=3)#
lines(ztime,z3/max(na.omit(z3)),col=4)
library("mapdata") #load mapdata library
map('japan',border=0) #draw japan map#
x=japsys08[,"x_coord"]#
y=japsys08[,"y_coord"]#
symbols(x,y,circles=japsys08[,"Big_region"],inches=0.1,fg="white",bg="red")
quartz(4)#
map('japan',border=0) #draw japan map#
x=japsys08[,"x_coord"]#
y=japsys08[,"y_coord"]#
symbols(x,y,circles=japsys08[,"Big_region"],inches=0.1,fg="white",bg="red")
library("mapdata") #load mapdata library
map('japan',border=0) #draw japan map#
x=japsys08[,"x_coord"]#
y=japsys08[,"y_coord"]#
symbols(x,y,circles=japsys08[,"Big_region"],inches=0.1,fg="white",bg="red")
symbols(x,y,circles=japsys08[,"Big_region"],inches=0.1,fg="white",bg="red", add=TRUE)
map('japan',border=0) #draw japan map#
x=japsys08[,"x_coord"]#
y=japsys08[,"y_coord"]#
symbols(x,y,circles=japsys08[,"Big_region"],inches=0.1,fg="white",bg="red", add=TRUE)
avcent=rowMeans(cent)#
secent=rep(0,4)#
for(j in 1:4){#
	secent[j]=sd(cent[,j])/2#
}
cent=matrix(rep(0,4*47),nrow=47,ncol=4)#
lims=t(matrix(c(1,52,53,104,105,156,157,200),nrow=2,ncol=4))#
ranges=lims[,2]-lims[,1]+1#
for(j in 1:47){#
	ts=z[j,]#
	for(k in 1:4){#
		cent[j,k]=ts[lims[k,1]:lims[k,2]]%*%(1:ranges[k])/sum(ts[lims[k,1]:lims[k,2]])#
	}	#
}#
#mean, conf limit cg#
avcent=rowMeans(cent)#
secent=rep(0,4)#
for(j in 1:4){#
	secent[j]=sd(cent[,j])/2#
}
japsys97=read.csv("~/HFMDbg/HFMD_syndromic_all_transposed.csv")
japsys97=read.csv("~/HFMDbg/HFMD_syndromic_all_transposed_tb.csv")
japsys97=read.table("~/HFMDbg/HFMD_syndromic_all_transposed_tb.csv", sep=",")
read.csv("~/Dropbox/HFMDbg/hfmd_syndromic_all_transposed.csv")
japsys97=read.csv("~/Dropbox/HFMDbg/hfmd_syndromic_all_transposed.csv")
x=japsys97[,"x_coord"]
y=japsys97[,"y_coord"]
z=japsys97[,4:645]
fit1=Sncf(x,y,z=as.matrix(z),resamp=5,latlon=TRUE)
plot.Sncf(fit1)
image(ztime,1:47,t(as.matrix(log(z+1)))) #crude ts plot
dim(ztime)
length(ztime)
length(t(as.matrix(log(z+1))))
length(1:47)
47*200
dim(t(as.matrix(log(z+1))))
ztime=1997+13/52+(1:642)/52
image(ztime,1:47,t(as.matrix(log(z+1)))) #crude ts plot
image(ztime,1:47,t(as.matrix(log(z[jappops,]+1)))) #crude ts plot pop order
abline(h=1:47,lwd=jappop/2000000)
zt=colSums(z)
nottok=zt-z["Tokyo",]
plot(ztime,nottok/max(nottok),type="l")
plot(ztime,nottok/max(na.omit(nottok)),type="l")
nottok
zt=colSums(z)
zt
nottok=zt-z["Tokyo",]
nottok
quartz(1)#
corprov=matrix(rep(0,3*47),nrow=47,ncol=3)#
for(j in 1:47){#
	yy=z[j,]#
	xx=zt-yy#
	xxv=as.numeric(xx)^0.5#
	yyv=as.numeric(yy)^0.5#
	test=cor.test(xxv,yyv)#
	corprov[j,1]=test$estimate#
	corprov[j,2]=test$conf.int[1]#
	corprov[j,3]=test$conf.int[2]#
}
palette(heat.colors(47))
plot(jappop,corprov[,2],type="n",xlab="Population",ylab="Correlation")#
points(jappop,corprov[,3],type="n")#
points(jappop,corprov[,1],pch=21,cex=(jappop/1000000)^0.5,bg=1:47)
Tokyo=as.numeric(z["Tokyo",])#
nottok=as.numeric(zt-Tokyo)#
spectok=spec.pgram(cbind(Tokyo,nottok),spans=c(3,3))#
quartz(3)#
plot(spectok,plot.type="marginal")
setwd("~/hfmd/hfmd_siqri_hbrs_b_vdiff/model")#
#
system("test -d ../results/sim/ || mkdir -p ../results/sim/")#
system("test -d ../results/sim_EV/ || mkdir -p ../results/sim_EV/")#
system("test -d ../results/sim_CA/ || mkdir -p ../results/sim_CA/")#
system("test -d ../results/sim_BOTH/ || mkdir -p ../results/sim_BOTH/")#
system("test -d ../results/sim_EV/final/ || mkdir -p ../results/sim_EV/final/")#
system("test -d ../results/sim_CA/final/ || mkdir -p ../results/sim_CA/final/")#
system("test -d ../results/sim_BOTH/final/ || mkdir -p ../results/sim_BOTH/final/")
system("fit theta -S p:all:guess:0.0,e:all:guess:0.0 | ./simul ode --traj -T 1000000 -o 780 -D 17810 -i 0")
require(plom)
s<-get.settings()
plot.data(s)
plot.X(s)
vc<-seq(0,1,0.05)#
#
len=length(vc)#
#lenv=length(vsig)#
#
#create 2 matrices to store sig vs pv#
EV.0<-vector("numeric",len)#
CA.0<-vector("numeric",len)#
#
#vsig_pv1<-array(NA,dim=c(len,lenv,2),dimnames=c(vc,vsig,c("EV","CA")))#
sig_pv1<-array(NA,dim=c(len,3),dimnames=c(vc,c("EV","CA","VAC")))
for(k in 1:len){#
	j=k-1#
	setwd("~/hfmd/hfmd_siqri_hbrs_b_v/model")#
#
	system(paste("fit theta -S e:all:guess:0.0,vsigma:all:guess:0.25,p:all:guess:",vc[k]," | ./simul ode --traj -o 781 -T 1000000 -D 17820 -p ../results/sim_EV/ -i ",j,sep=""))#
#
	temp<-read.csv(paste("~/hfmd/hfmd_siqri_hbrs_b_v/results/sim_EV/X_",j,".csv",sep=""),header=TRUE)#
	sig_pv1[k,1]<-mean(temp$obs_mean.EV71_JAP__IASR__inc)#
	sig_pv1[k,2]<-mean(temp$obs_mean.CA16_JAP__IASR__inc)#
	sig_pv1[k,3]<-mean(temp$obs_mean.VAC_JAP__IASR__inc)#
	}#
#
require(plom)#
s<-get.settings()#
layout(matrix(1:(4*6),4,6,byrow=TRUE))#
par(mar=c(0,0,0,0))#
for(k in 1:len){#
	j=k-1#
	temp<-read.csv(paste("~/hfmd/hfmd_siqri_hbrs_b_v/results/sim_EV/X_",j,".csv",sep=""),header=TRUE)#
	plot(temp$obs_mean.EV71_JAP__IASR__inc,type="l",xaxt="n",yaxt="n",ylim=c(0,sig_pv1[1,1]*5),xlab="",ylab="")#
	abline(h=mean(temp$obs_mean.EV71_JAP__IASR__inc))#
	#plot.X(s,res="../results/sim_EV",id=j,obs=FALSE,xaxt="n",yaxt="n",xlab="",ylab="")#
}
system("fit theta -S p:all:guess:0.0,e:all:guess:0.0 | ./simul ode --traj -T 1000000 -o 780 -D 17810 -i 0")
system("fit theta -S p:all:guess:0.0,e:all:guess:0.0 | ./simul ode --traj -T 1000000 -o 780 -D 17810 -i 0")
